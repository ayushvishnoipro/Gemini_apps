from dotenv import load_dotenv
load_dotenv()

import streamlit as st
import os
import google.generativeai as genai
from PIL import Image

# Configure the Gemini Pro Vision model (assuming you have access)
model = genai.GenerativeModel("gemini-pro-vision")

def get_gemeni_response(input_text, image_data, prompt):
  """
  Sends a prompt, image data, and user input to the Gemini model and retrieves the response.

  Args:
      input_text: The user's prompt or question about the invoice.
      image_data: A list containing image data in the required format for the model.
      prompt: An additional prompt describing the task (invoice analysis in this case).

  Returns:
      The text response generated by the Gemini model.
  """
  response = model.generate_content([input_text, image_data, prompt])
  return response.text

def input_image_details(uploaded_file):
  """
  Processes the uploaded image file and converts it to the format expected by the model.

  Args:
      uploaded_file: A Streamlit file uploader object containing the uploaded image.

  Returns:
      A list containing a dictionary with the image data (mime type and content).
      Raises a FileNotFoundError if no file is uploaded.
  """
  if uploaded_file is not None:
    # Read the file content into bytes
    bytes_data = uploaded_file.getvalue()
    image_parts = [
      {
        "mime_type": uploaded_file.type,
        "data": bytes_data
      }
    ]
    return image_parts
  else:
    raise FileNotFoundError("No file uploaded")

# Initialize the Streamlit app and set the page title
st.set_page_config(page_title="Multi Language Invoice Extractor")
st.header("Multi Language Invoice Extractor")

# Input field for the user's prompt or question
input_text = st.text_input("Input Prompt", key="input")

# File uploader for the invoice image
uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png"])

# Display the uploaded image if available
image = None
if uploaded_file is not None:
  image = Image.open(uploaded_file)
  st.image(image, caption="Uploaded Image", use_column_width=True)

# Button to submit the user's input and image
submit_button = st.button("Tell me about the invoice")

# Define the prompt describing the task (invoice analysis)
input_prompt = """
I am Bard, a large language model trained to understand and analyze invoices. I can process images of invoices and extract key information like total amount, due date, vendor details, and line items. Ask me any questions you have about the invoice you upload, and I will do my best to answer them based on the information I can extract.
"""

# Process user input and image when the button is clicked
if submit_button:
  # Get image data in the required format
  image_data = input_image_details(uploaded_file)
  # Generate response from the Gemini model
  response = get_gemeni_response(input_text, image_data, input_prompt)
  # Display the model's response
  st.subheader("The response is:")
  st.write(response)
